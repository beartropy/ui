<div
    x-data="{
                    value: [1,2],
                open: false,
        toggle() {
            this.open = !this.open;
            if (this.open && this.remoteUrl && !this.initDone) {
                this.page = 1;
                this.fetchOptions(true);
                this.initDone = true;
            }
        },
        close() { this.open = false; },
        options: JSON.parse('{\u00221\u0022:{\u0022label\u0022:\u0022Uno\u0022,\u0022icon\u0022:null,\u0022avatar\u0022:\u0022A\u0022,\u0022description\u0022:\u0022Desc A\u0022},\u00222\u0022:{\u0022label\u0022:\u0022Dos\u0022,\u0022icon\u0022:\u0022\\ud83c\\udf0e\u0022,\u0022avatar\u0022:null,\u0022description\u0022:\u0022Desc B\u0022}}'),
        search: '',
        isMulti: true,
        maxChips: 3,
        perPage: 15,
        page: 1,
        hasMore: false,
        loading: false,
        remoteUrl: '',
        initDone: false,

        filteredOptions() {
            // Si remote: las opciones ya se filtran en backend
            if (this.remoteUrl) {
                return Object.entries(this.options);
            }
            const entries = Object.entries(this.options);
            if (!this.search) return entries;
            return entries.filter(([id, opt]) =>
                (opt.label ?? opt ?? id).toLowerCase().includes(this.search.toLowerCase())
            );
        },
        isSelected(id) {
            if (this.isMulti) {
                return Array.isArray(this.value)
                    ? this.value.map(String).includes(String(id))
                    : false;
            }
            return String(this.value) === String(id);
        },
        setValue(id) {
            id = String(id);
            if (this.isMulti) {
                if (!Array.isArray(this.value)) this.value = [];
                const valueStr = this.value.map(String);
                if (valueStr.includes(id)) {
                    this.value = valueStr.filter(v => v !== id);
                } else {
                    this.value = valueStr.concat([id]);
                }
                this.syncInput();
            } else {
                this.value = id;
                this.syncInput();
                this.close();
            }
        },
        removeSelected(id) {
            if (!this.value) return;
            this.value = this.value.filter(v => v !== id);
            this.syncInput();
        },
        syncInput() {
                            this.$refs.multiInputs.innerHTML = '';
                if (this.isMulti) {
                    if (Array.isArray(this.value)) {
                        this.value.forEach(val => {
                            const input = document.createElement('input');
                            input.type = 'hidden';
                            input.name = 'complex-select[]';
                            input.value = val;
                            this.$refs.multiInputs.appendChild(input);
                        });
                    }
                } else {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'complex-select';
                    input.value = this.value ?? '';
                    this.$refs.multiInputs.appendChild(input);
                }
            
                    },
        visibleChips() {
            return Array.isArray(this.value) ? this.value.slice(0, this.maxChips) : [];
        },
        hiddenCount() {
            return Array.isArray(this.value) && this.value.length > this.maxChips
                ? this.value.length - this.maxChips
                : 0;
        },
        clearValue() {
            if (this.isMulti) {
                this.value = [];
            } else {
                this.value = '';
            }
            this.syncInput();
            // Si querés que se cierre el dropdown al limpiar:
            // this.close();
        },
        // === Remote/Lazy ===
        fetchOptions(reset = false) {
            if (!this.remoteUrl || this.loading) return;
            this.loading = true;
            let params = new URLSearchParams({
                q: this.search,
                page: this.page,
                per_page: this.perPage,
            }).toString();

            fetch(`${this.remoteUrl}?${params}`)
                .then(res => res.json())
                .then(data => {
                    if (reset) {
                        this.options = data.options || {};
                    } else {
                        this.options = Object.assign({}, this.options, data.options || {});
                    }
                    this.hasMore = data.hasMore;
                    this.loading = false;
                });
        },
    }"
    x-init="
                if (isMulti && Array.isArray(value)) {
            value = value.map(String);
        }
        if (remoteUrl) {
            fetchOptions(true);
            initDone = true;
        }
        // Watch search changes
        $watch('search', value => {
            page = 1;
            fetchOptions(true);
        });
    "
    class="flex flex-col w-full"
>
            <label for="complex-select" class="text-red-800 dark:text-red-200 font-semibold ml-1">País</label>
    
            <span x-ref="multiInputs"></span>
    
    <div class="flex flex-col ">

    <div class="flex items-center w-full group transition-all shadow-sm rounded
        bg-red-50 dark:bg-red-950/60
        border border-red-300 dark:border-red-600
        focus-within:ring-2 focus-within:ring-red-500 focus-within:border-red-500
        disabled:bg-red-100 dark:bg-red-950
        
        px-4
        h-12
        min-w-0"
        tabindex="0"
    >

        
                    <div class="flex items-center space-x-2 pr-2 min-w-0">
                <span class="snap-start">START</span>
            </div>
        
        
                    <div @click="toggle()" class="flex flex-wrap items-center gap-1 min-h-[1.6em] cursor-pointer w-full text-red-800 dark:text-red-200">
                
                <template x-if="isMulti && value && value.length">
                    <template x-for="(id, idx) in visibleChips()" :key="id">
                        <span
                            class="inline-flex items-center gap-1 rounded px-2 py-0.5 text-sm bg-red-100 dark:bg-red-800 text-red-900 dark:text-red-200"
                            :title="options[id]?.description ?? ''"
                        >
                            <!-- Avatar -->
                            <template x-if="options[id]?.avatar">
                                <span class="inline-flex w-5 h-5 rounded-full overflow-hidden justify-center items-center bg-neutral-200 dark:bg-neutral-700">
                                    <img :src="options[id].avatar" alt="" class="w-5 h-5 object-cover" x-show="options[id].avatar && options[id].avatar.startsWith('http')" />
                                    <span x-show="options[id].avatar && !options[id].avatar.startsWith('http')" x-text="options[id].avatar" class="text-base"></span>
                                </span>
                            </template>
                            <!-- Icono, solo si no hay avatar -->
                            <template x-if="!options[id]?.avatar && options[id]?.icon">
                                <span class="inline-flex w-5 h-5 justify-center items-center">
                                    <span x-text="options[id].icon" class="text-base"></span>
                                </span>
                            </template>
                            <!-- Label -->
                            <span x-text="options[id]?.label ?? options[id] ?? id"></span>
                            <!-- Remove button -->
                            <button type="button" @click.stop="removeSelected(id)" class="ml-1 hover:text-red-500">&times;</button>
                        </span>

                    </template>
                </template>
                
                <span
                    x-show="isMulti && value && hiddenCount()"
                    class="inline-flex items-center rounded px-2 py-0.5 text-xs font-semibold bg-red-200 dark:bg-red-900 text-red-700 dark:text-red-200"
                >
                    +<span x-text="hiddenCount()"></span>
                </span>

                
                <span
                    x-show="!((isMulti && value && value.length) || (!isMulti && value))"
                    class="beartropy-placeholder"
                >Seleccionar...</span>
                
                <span
                    x-show="!isMulti && value"
                    class="flex items-center gap-2 truncate text-red-800 dark:text-red-200"
                    :title="options[value]?.description ?? ''"
                >
                    <!-- Avatar -->
                    <template x-if="options[value]?.avatar">
                        <span class="inline-flex w-5 h-5 rounded-full overflow-hidden justify-center items-center bg-neutral-200 dark:bg-neutral-700">
                            <img :src="options[value].avatar"
                                 alt=""
                                 class="w-5 h-5 object-cover"
                                 x-show="options[value].avatar && options[value].avatar.startsWith('http')" />
                            <span x-show="options[value].avatar && !options[value].avatar.startsWith('http')"
                                  x-text="options[value].avatar"
                                  class="text-base"></span>
                        </span>
                    </template>
                    <!-- Icono, solo si no hay avatar -->
                    <template x-if="!options[value]?.avatar && options[value]?.icon">
                        <span class="inline-flex w-5 h-5 justify-center items-center">
                            <span x-text="options[value].icon" class="text-base"></span>
                        </span>
                    </template>
                    <!-- Label -->
                    <span x-text="options[value]?.label ?? options[value] ?? value"></span>
                </span>
            </div>
        
        
                    <div class="flex items-center pl-2 min-w-0">
                <span
                    x-show="(isMulti && value && value.length) || (!isMulti && value)"
                    @click.stop="clearValue()"
                    class="mr-1 cursor-pointer text-neutral-400 hover:text-red-500 transition"
                    title="Limpiar selección"
                >
                    <svg class="shrink-0 text-gray-700 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 w-6 h-6 focus:outline-none" tabindex="0" fill="currentColor" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
    <path d="M18 6 6 18M6 6l12 12"/>
</svg>
                </span>
                        <span @click="toggle()" class="cursor-pointer w-full">
                <svg class="w-5 h-5 pl-1 transition-transform duration-200 text-red-600 dark:text-red-300"
                    :class="{ 'rotate-180': open }"
                    fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
                </svg>
            </span>
            </div>
            </div>
    
            <div class="relative">
            <div
    x-show="open"
    x-transition:enter="transition ease-out duration-150"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-100"
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    class="absolute z-50 left-0 top-full mt-1 w-full
        rounded-lg
        border border-red-300 dark:border-red-800
        bg-red-50 dark:bg-red-950/90
        shadow-xl
        origin-top beartropy-thin-scrollbar"
    style="min-width: 8rem;"
    @click.outside="open = false"

>
    <div class="p-2">
                    <div class="flex flex-col w-full">
    
    <div 
    x-data="{
        value: '',
        showPassword: false,
        copySuccess: false,
        clear() {
            this.value = '';
            this.$refs.input.value = '';
            this.$refs.input.dispatchEvent(new Event('input'));
        },
        copyToClipboard() {
            navigator.clipboard.writeText(this.$refs.input.value).then(() => {
                this.copySuccess = true;
                setTimeout(() => this.copySuccess = false, 1000);
            });
        },
    }"
    x-init="
            value = $refs.input.value;
            $refs.input.addEventListener('input', () => {
                value = $refs.input.value;
            });
            $nextTick(() => {
                value = $refs.input.value;
            });
        "
    class="flex items-center w-full group relative"
>
    <div
        class="flex items-center group w-full rounded transition-all shadow-sm
            bg-red-50 dark:bg-red-950/60
            border border-red-300 dark:border-red-600
            focus-within:ring-2 focus-within:ring-red-500 focus-within:border-red-500
            disabled:bg-red-100 dark:bg-red-950
            
            px-4
            h-12"
            >
        
        
        <div class="w-full h-full flex items center" wire:ignore>
            <input 
                x-ref="input"
                x-bind:type="(typeof showPassword !== 'undefined' && showPassword) ? 'text' : 'text'"
                class="flex-1 bg-transparent outline-none border-none shadow-none beartropy-input
                    text-lg
                    text-red-800 dark:text-red-200
                    placeholder:text-red-400 dark:placeholder:text-red-600
                    disabled:text-red-400 dark:text-red-700"
                placeholder="Buscar..."
                aria-invalid="false" id="complex-select-search" custom-error="" hint="" x-model="search" autocomplete="off"
            >
        </div>

        
                    <div class="flex items-center h-full space-x-2 pl-1 beartropy-inputbase-end-slot">
                <button
                    type="button"
                    x-show="value.length > 0"
                    x-on:click="clear"
                    tabindex="-1"
                    aria-label="Clear"
                >
                    <svg class="shrink-0 text-gray-700 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 w-6 h-6 focus:outline-none" tabindex="0" fill="currentColor" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
    <path d="M18 6 6 18M6 6l12 12"/>
</svg>
                </button>
            </div>
            </div>

</div>

    <p class="text-sm ml-1 mt-0.5  invisible">
     
</p>
</div>
                </div>
                <ul
                    class="max-h-60 overflow-y-auto divide-y divide-gray-100 dark:divide-gray-800 beartropy-thin-scrollbar"
                    @scroll="if($event.target.scrollTop + $event.target.clientHeight >= $event.target.scrollHeight - 10 && hasMore && !loading) { page++; fetchOptions(); }"
                >
                    <template
                        x-for="[id, option] in filteredOptions()"
                        :key="id"
                    >
                        <li>
                            <button
                                type="button"
                                @click="setValue(id)"
                                class="w-full text-left px-4 py-2 flex items-center gap-2 text-red-800 dark:text-red-200 hover:bg-red-100 dark:hover:bg-red-900"
                                :class="isSelected(id) ? 'font-bold bg-red-100 dark:bg-red-900 bg-red-200 dark:bg-red-800 font-bold' : ''"
                            >
                                <div class="flex flex-col items-start w-full">
                                    <div class="flex items-center gap-2">
                                        <!-- Avatar -->
                                        <template x-if="option.avatar">
                                            <span class="inline-flex w-6 h-6 rounded-full overflow-hidden justify-center items-center bg-neutral-200 dark:bg-neutral-700">
                                                <img :src="option.avatar" alt="" class="w-6 h-6 object-cover" x-show="option.avatar && option.avatar.startsWith('http')" />
                                                <span x-show="option.avatar && !option.avatar.startsWith('http')" x-text="option.avatar" class="text-lg"></span>
                                            </span>
                                        </template>
                                        <!-- Icono, solo si no hay avatar -->
                                        <template x-if="!option.avatar && option.icon">
                                            <span class="inline-flex w-6 h-6 justify-center items-center">
                                                <span x-text="option.icon" class="text-lg"></span>
                                            </span>
                                        </template>
                                        <!-- Label -->
                                        <span class="truncate font-medium" x-text="option.label ?? option ?? id"></span>
                                    </div>
                                    <!-- Descripción -->
                                    <template x-if="option.description">
                                        <span class="text-xs text-red-600 dark:text-red-400 mt-0.5"
                                            x-text="option.description"></span>
                                    </template>
                                </div>
                                <template x-if="isMulti">
                                    <div class="ml-auto flex items-center">
                                        <input type="checkbox" :checked="isSelected(id)" class="form-checkbox pointer-events-none" @click.prevent />
                                    </div>
                                </template>
                            </button>
                        </li>
                    </template>
                    <template x-if="loading">
                        <li class="text-xs text-red-500 p-2 text-center">Cargando...</li>
                    </template>
                    <template x-if="!loading && filteredOptions().length === 0">
                        <li class="text-xs text-red-500 p-2 text-center">No hay resultados.</li>
                    </template>

                </ul>
</div>
        </div>
    </div>
    <p class="text-sm ml-1 mt-0.5  invisible">
     
</p>
</div>
    